"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import os

try:
    # For importing environment vars on local machines
    from . import keys
except ImportError:
    os.environ['localhost'] = "False"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOGOUT_REDIRECT_URL = '/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = [
    'b11-webapp-f36b0eb176b6.herokuapp.com', # Heroku
    '127.0.0.1' # Localhost
]


# Application definition
INSTALLED_APPS = [
    # For connection to Whistleblower app
    'whistleblower.apps.WhistleblowerConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # For Google OAuth2.0 #
    'allauth.socialaccount.providers.google',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # For AWS S3 Storage #
    'storages',
    # For the homePage
    'homePage',
    'accounts',
    'crispy_forms'
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # For Google OAuth2.0 #
    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = 'mysite.urls'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # For Google OAuth2.0 # 
                'django.template.context_processors.request'
            ],
        },
    },
]


# For Google OAuth2.0 # 
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# For Google OAuth2.0 #
# After logging in using Google OAuth2.0, redirects to /whistleblower/profile
LOGIN_REDIRECT_URL = '/accounts/profile/'

# For Google OAuth2.0 #
SITE_ID = 1

# For Google OAuth2.0 #
# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': os.environ['GOOGLE_CLIENT_ID'],
            'secret': os.environ['GOOGLE_CLIENT_SECRET'],
            'key': ''
        }
    }
}

SOCIALACCOUNT_LOGIN_ON_GET = True
LOGIN_URL = 'accounts/signin/'
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {}

USE_LOCAL = os.getenv('localhost') == 'True'
USE_GH_TEST_ENV = os.getenv('GH_TEST_ENV') == 'True'

if USE_LOCAL:
    print("Local Host", os.environ["localhost"])
    if os.environ["localhost"] == "True":
        print("Running on localhost")
        # Running Local Tests
        DATABASES["default"] = {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
elif USE_GH_TEST_ENV:
    if os.environ["GH_TEST_ENV"] == "True":
        print("Running on GitHub Actions")
        # Running Local Tests
        DATABASES["default"] = {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
else:
    print("Running on Heroku")
    # Running on Heroku
    import dj_database_url
    DATABASES['default'] = dj_database_url.config()


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# AWS S3 Storage Setup, so Django-Storages can use it
# AWS S3 Storage Setup
AWS_S3_ACCESS_KEY_ID  = os.environ['AWS_S3_ACCESS_KEY_ID']
AWS_S3_SECRET_ACCESS_KEY  = os.environ['AWS_S3_SECRET_ACCESS_KEY']
AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']
AWS_S3_REGION_NAME = os.environ['AWS_S3_REGION_NAME']
AWS_DEFAULT_ACL = None #'public-read'
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

# For serving static files directly from S3
AWS_S3_URL_PROTOCOL = 'https://'
AWS_S3_USE_SSL = True
AWS_S3_VERIFY = True

if DEBUG:
    # Serve static files from the local 'static' directory in development
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [BASE_DIR / 'static',]
    # Optional: specify a local directory for collectstatic to collect static files to
    STATIC_ROOT = BASE_DIR / 'staticfiles'
else:
    # Production settings for AWS S3
    STATIC_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/static/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # S3 File storage settings
    MEDIA_URL = f'{AWS_S3_URL_PROTOCOL}://{AWS_S3_CUSTOM_DOMAIN}/media/'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'




# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
